#include <stdio.h>
#include <stdlib.h>


typedef struct Node{
    int dado;
    struct Node* left;
    struct Node* right;
} Node;

Node* GetNewNode(int x){
    Node* elem = (Node*)malloc(sizeof(Node));
    elem->dado = x;
    elem->left = NULL;
    elem ->right = NULL;
    return elem;
}

Node* Insert(Node* root, int x){
    if (root == NULL){
        root = GetNewNode(x);
    }
    else if (x <= root){
        root->left = Insert(root->left, x);
    }
    else{
        root->right = Insert(root->right, x);
    }
    return root;
}

int IsSubtreeLesser(Node* root, int x){
    if (root == NULL){
        return 1;
    }
    if (root->dado <= x &&
        IsSubtreeLesser(root->left, x) &&
        IsSubtreeLesser(root->right, x)){
            return 1;
        }
    else{
        return 0;
    }
}

int IsSubtreeGreater(Node* root, int x){
    if (root == NULL){
        return 1;
    }
    if (root->dado > x &&
        IsSubtreeGreater(root->left, x) &&
        IsSubtreeGreater(root->right, x)){
            return 1;
        }
    else{
        return 0;
    }
}

int IsBinarySearchTree(Node* root){
    if (IsSubtreeLesser(root->left, root->dado) && 
        IsSubtreeGreater(root->right, root->dado)&&
        IsBinarySearchTree(root->left)&&
        IsBinarySearchTree(root->right)){
            return 1;
        }
    else{
        return 0;
    }
}

int main(void){
    Node* root = NULL;
    root = Insert(root, 10);
    root = Insert(root, 20);
    root = Insert(root, 30);
    root = Insert(root, 5);
    root = Insert(root, 6);
    root = Insert(root, 25);
    if (IsBinarySearchTree(root)){
        printf("Is BST");
    } else {
        printf("Isnt BST");
    }
    return 0;
}